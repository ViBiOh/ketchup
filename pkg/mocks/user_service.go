// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ViBiOh/ketchup/pkg/model (interfaces: UserService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// UserService is a mock of UserService interface.
type UserService struct {
	ctrl     *gomock.Controller
	recorder *UserServiceMockRecorder
}

// UserServiceMockRecorder is the mock recorder for UserService.
type UserServiceMockRecorder struct {
	mock *UserService
}

// NewUserService creates a new mock instance.
func NewUserService(ctrl *gomock.Controller) *UserService {
	mock := &UserService{ctrl: ctrl}
	mock.recorder = &UserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UserService) EXPECT() *UserServiceMockRecorder {
	return m.recorder
}

// StoreInContext mocks base method.
func (m *UserService) StoreInContext(arg0 context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreInContext", arg0)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// StoreInContext indicates an expected call of StoreInContext.
func (mr *UserServiceMockRecorder) StoreInContext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreInContext", reflect.TypeOf((*UserService)(nil).StoreInContext), arg0)
}
