// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ViBiOh/ketchup/pkg/service/user (interfaces: AuthService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/ViBiOh/auth/v2/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// Auth is a mock of AuthService interface.
type Auth struct {
	ctrl     *gomock.Controller
	recorder *AuthMockRecorder
}

// AuthMockRecorder is the mock recorder for Auth.
type AuthMockRecorder struct {
	mock *Auth
}

// NewAuth creates a new mock instance.
func NewAuth(ctrl *gomock.Controller) *Auth {
	mock := &Auth{ctrl: ctrl}
	mock.recorder = &AuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Auth) EXPECT() *AuthMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *Auth) Check(arg0 context.Context, arg1, arg2 model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *AuthMockRecorder) Check(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*Auth)(nil).Check), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *Auth) Create(arg0 context.Context, arg1 model.User) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *AuthMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Auth)(nil).Create), arg0, arg1)
}
