// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ViBiOh/ketchup/pkg/model (interfaces: HelmProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	semver "github.com/ViBiOh/ketchup/pkg/semver"
	gomock "github.com/golang/mock/gomock"
)

// HelmProvider is a mock of HelmProvider interface.
type HelmProvider struct {
	ctrl     *gomock.Controller
	recorder *HelmProviderMockRecorder
}

// HelmProviderMockRecorder is the mock recorder for HelmProvider.
type HelmProviderMockRecorder struct {
	mock *HelmProvider
}

// NewHelmProvider creates a new mock instance.
func NewHelmProvider(ctrl *gomock.Controller) *HelmProvider {
	mock := &HelmProvider{ctrl: ctrl}
	mock.recorder = &HelmProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *HelmProvider) EXPECT() *HelmProviderMockRecorder {
	return m.recorder
}

// FetchIndex mocks base method.
func (m *HelmProvider) FetchIndex(arg0 context.Context, arg1 string, arg2 map[string][]string) (map[string]map[string]semver.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchIndex", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]map[string]semver.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchIndex indicates an expected call of FetchIndex.
func (mr *HelmProviderMockRecorder) FetchIndex(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchIndex", reflect.TypeOf((*HelmProvider)(nil).FetchIndex), arg0, arg1, arg2)
}

// LatestVersions mocks base method.
func (m *HelmProvider) LatestVersions(arg0 context.Context, arg1, arg2 string, arg3 []string) (map[string]semver.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestVersions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[string]semver.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestVersions indicates an expected call of LatestVersions.
func (mr *HelmProviderMockRecorder) LatestVersions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestVersions", reflect.TypeOf((*HelmProvider)(nil).LatestVersions), arg0, arg1, arg2, arg3)
}
