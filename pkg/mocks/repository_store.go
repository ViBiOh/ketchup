// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ViBiOh/ketchup/pkg/model (interfaces: RepositoryStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/ViBiOh/ketchup/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// RepositoryStore is a mock of RepositoryStore interface.
type RepositoryStore struct {
	ctrl     *gomock.Controller
	recorder *RepositoryStoreMockRecorder
}

// RepositoryStoreMockRecorder is the mock recorder for RepositoryStore.
type RepositoryStoreMockRecorder struct {
	mock *RepositoryStore
}

// NewRepositoryStore creates a new mock instance.
func NewRepositoryStore(ctrl *gomock.Controller) *RepositoryStore {
	mock := &RepositoryStore{ctrl: ctrl}
	mock.recorder = &RepositoryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RepositoryStore) EXPECT() *RepositoryStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *RepositoryStore) Create(arg0 context.Context, arg1 model.Repository) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *RepositoryStoreMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*RepositoryStore)(nil).Create), arg0, arg1)
}

// DeleteUnused mocks base method.
func (m *RepositoryStore) DeleteUnused(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnused", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnused indicates an expected call of DeleteUnused.
func (mr *RepositoryStoreMockRecorder) DeleteUnused(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnused", reflect.TypeOf((*RepositoryStore)(nil).DeleteUnused), arg0)
}

// DeleteUnusedVersions mocks base method.
func (m *RepositoryStore) DeleteUnusedVersions(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnusedVersions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnusedVersions indicates an expected call of DeleteUnusedVersions.
func (mr *RepositoryStoreMockRecorder) DeleteUnusedVersions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnusedVersions", reflect.TypeOf((*RepositoryStore)(nil).DeleteUnusedVersions), arg0)
}

// DoAtomic mocks base method.
func (m *RepositoryStore) DoAtomic(arg0 context.Context, arg1 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoAtomic", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoAtomic indicates an expected call of DoAtomic.
func (mr *RepositoryStoreMockRecorder) DoAtomic(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoAtomic", reflect.TypeOf((*RepositoryStore)(nil).DoAtomic), arg0, arg1)
}

// Get mocks base method.
func (m *RepositoryStore) Get(arg0 context.Context, arg1 uint64, arg2 bool) (model.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *RepositoryStoreMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*RepositoryStore)(nil).Get), arg0, arg1, arg2)
}

// GetByName mocks base method.
func (m *RepositoryStore) GetByName(arg0 context.Context, arg1 model.RepositoryKind, arg2, arg3 string) (model.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(model.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *RepositoryStoreMockRecorder) GetByName(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*RepositoryStore)(nil).GetByName), arg0, arg1, arg2, arg3)
}

// List mocks base method.
func (m *RepositoryStore) List(arg0 context.Context, arg1 uint, arg2 string) ([]model.Repository, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.Repository)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *RepositoryStoreMockRecorder) List(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*RepositoryStore)(nil).List), arg0, arg1, arg2)
}

// ListByKinds mocks base method.
func (m *RepositoryStore) ListByKinds(arg0 context.Context, arg1 uint, arg2 string, arg3 ...model.RepositoryKind) ([]model.Repository, uint64, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListByKinds", varargs...)
	ret0, _ := ret[0].([]model.Repository)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByKinds indicates an expected call of ListByKinds.
func (mr *RepositoryStoreMockRecorder) ListByKinds(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByKinds", reflect.TypeOf((*RepositoryStore)(nil).ListByKinds), varargs...)
}

// Suggest mocks base method.
func (m *RepositoryStore) Suggest(arg0 context.Context, arg1 []uint64, arg2 uint64) ([]model.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suggest", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Suggest indicates an expected call of Suggest.
func (mr *RepositoryStoreMockRecorder) Suggest(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suggest", reflect.TypeOf((*RepositoryStore)(nil).Suggest), arg0, arg1, arg2)
}

// UpdateVersions mocks base method.
func (m *RepositoryStore) UpdateVersions(arg0 context.Context, arg1 model.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVersions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVersions indicates an expected call of UpdateVersions.
func (mr *RepositoryStoreMockRecorder) UpdateVersions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVersions", reflect.TypeOf((*RepositoryStore)(nil).UpdateVersions), arg0, arg1)
}
